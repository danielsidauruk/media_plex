// Mocks generated by Mockito 5.3.2 from annotations
// in library_book/test/helpers/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:media_plex/core/failure.dart' as _i5;
import 'package:media_plex/media_plex/books/domain/entities/author.dart' as _i8;
import 'package:media_plex/media_plex/books/domain/entities/book_detail.dart'
    as _i6;
import 'package:media_plex/media_plex/books/domain/entities/search.dart' as _i7;
import 'package:media_plex/media_plex/books/domain/repositories/books_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LibraryBookRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockLibraryBookRepository extends _i1.Mock
    implements _i3.BookRepository {
  MockLibraryBookRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.BookDetails>> getBookDetail(
          String? key) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBookDetails,
          [key],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.BookDetails>>.value(
            _FakeEither_0<_i5.Failure, _i6.BookDetails>(
          this,
          Invocation.method(
            #getBookDetails,
            [key],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.BookDetails>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i7.Search>> searchBooks(String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchBooks,
          [query],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i7.Search>>.value(
            _FakeEither_0<_i5.Failure, _i7.Search>(
          this,
          Invocation.method(
            #searchBooks,
            [query],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i7.Search>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i8.Author>> getAuthor(String? authors) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAuthor,
          [authors],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i8.Author>>.value(
            _FakeEither_0<_i5.Failure, _i8.Author>(
          this,
          Invocation.method(
            #getAuthor,
            [authors],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i8.Author>>);
}
